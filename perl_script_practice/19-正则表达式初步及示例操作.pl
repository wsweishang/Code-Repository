#!/usr/bin/perl;

use v5.10.0;
use strict;
use warnings;

#==============================
#正则表达式初步及示例操作
#==============================




#模式匹配通配符：
#
#
#
#
#
#
#
#
#
#
#
#
#
#模式匹配修饰符：
#
#==================================================
#=~m///
#==================================================













#==================================================
#=~s/searchpattern/repalcement/
#==================================================
#该运算符找出searchpattern，并用replacement整个替换匹配，返回匹配的数量或替换的数量，如果无任何匹配则返回0
#/g、/i
#/g：全局搜索




#/i：忽略大小写






#==================================================
#=~tr/searchment/repalcement/
#==================================================
#tr///与s///类似，都是用后一对//中的内容取代前一对//的内容，但又有所区别
#把searchment的第一个字符换成replacement的第一个字符，searchment的第二个字符换成replacement的第二个字符
#即：转换操作符tr///用于搜索一个字符串，找出searchmentlist中的各个元素，并用replacementlist中的对应元素对它们进行替换
#如果replacementlist是空的，或者与searchmentlist相同，那么tr///将计算并返回匹配的字符。目标字符串并不被修改。
#/c、/d、/s

#/c：表示把匹配不上的字符进行替换.
my $temp="AAAABCDEF";
my $count=$temp=~tr/A/H/c;
print "$temp\t$count\n";   #结果：AAAAHHHHH 5

#/d：表示把匹配上的字符全部替换
$temp="AAAABCDEF";
#$count=$temp=~tr/A/H/d;
print "$temp\t$count\n";   #结果：HHHHBCDEF 4

#/s：表示如果要替换的字符中出现连续多个一样的字符，则去冗余：
$temp="AAAABCDEF";
#$count=$temp=~tr/A/H/ds;
print "$temp\t$count\n";   #结果：HBCDEF 4

$temp="AAAABCDEF";
$count=$temp=~tr/A/H/cs;
print "$temp\t$count\n";   #结果：AAAAH 5

#总结：
$count=$temp=~tr/A//;   #表示计算$temp中出现A的次数，$temp并不改变值
$count=$temp=~tr/A/A/;   #表示计算$temp中出现A的次数，$temp并不改变值

$temp="AAAABCDEF";
$count=$temp=~tr/[A-Z]/[a-z]/;   #表示进行大小写转换
print "$temp\t$count\n";   #结果：aaaabcdef 9 

$temp="AAAABCDEF";
$count=$temp=~tr/[A-Z]/[A-Z]/;   #如果这样写则$temp不会改变，仅统计$temp里面大写字母的个数
print "$temp\t$count\n";   #结果：AAAABCDEF 9





#.   匹配除换行符以外的所有字符
#x?  匹配 0 次或一次 x 字符串
#x*  匹配 0 次或多次 x 字符串，但匹配可能的最少次数
#x+  匹配 1 次或多次 x 字符串，但匹配可能的最少次数
#.*  匹配 0 次或一次的任何字符
#.+  匹配 1 次或多次的任何字符
#{m} 匹配刚好是 m 个 的指定字符串
#{m,n}   匹配在 m个 以上 n个 以下的指定字符串
#{m,}    匹配 m个 以上 的指定字符串
#[]  匹配符合 [] 内的字符
#[^] 匹配不符合 [] 内的字符
#[0-9]   匹配所有数字字符
#[a-z]   匹配所有小写字母字符
#[^0-9]  匹配所有非数字字符
#[^a-z]  匹配所有非小写字母字符
#^   匹配字符开头的字符
#$   匹配字符结尾的字符
#\d  匹配一个数字的字符，和 [0-9] 语法一样
#\d+ 匹配多个数字字符串，和 [0-9]+ 语法一样
#\D  非数字，其他同 \d
#\D+ 非数字，其他同 \d+
#\w  英文字母或数字的字符串，和 [a-zA-Z0-9] 语法一样
#\w+ 和 [a-zA-Z0-9]+ 语法一样
#\W  非英文字母或数字的字符串，和 [^a-zA-Z0-9] 语法一样
#\W+ 和 [^a-zA-Z0-9]+ 语法一样
#\s  空格，和 [\n\t\r\f] 语法一样
#\s+ 和 [\n\t\r\f]+ 一样
#\S  非空格，和 [^\n\t\r\f] 语法一样
#\S+ 和 [^\n\t\r\f]+ 语法一样
#\b  匹配以英文字母,数字为边界的字符串
#\B  匹配不以英文字母,数值为边界的字符串
#a|b|c   匹配符合a字符 或是b字符 或是c字符的字符串
#abc 匹配含有 abc 的字符串
#(pattern)   () 这个符号会记住所找寻到的字符串，是一个很实用的语法。第一个 () 内所找到的字符串变成 $1 这个变量或是 \1 变量，第二个 () 内所找到的字符串变成 $2 这个变量或是 \2 变量，以此类推下去。
#/pattern/i  i 这个参数表示忽略英文大小写，也就是在匹配字符串的时候，不考虑英文的大小写问题。
#\   如果要在 pattern 模式中找寻一个特殊字符，如 "*"，则要在这个字符前加上 \ 符号，这样才会让特殊字符失效



















